// Unique symbol used for our type brands. Unused at runtime.
const type = Symbol("type");
export const u32 = i => {
  if (!u32.check(i)) {
    throw new TypeError(`expected u32, got ${typeof i} ${i}`);
  }
  return i;
};
u32.guard = u32;
u32.check = i =>
  typeof i === "number" && i >= 0 && i <= 0xffffffff && Number.isSafeInteger(i);
export const u64 = i => {
  if (!u64.check(i)) {
    throw new TypeError(`expected u64, got ${typeof i} ${i}`);
  }
  return i;
};
u64.guard = u64;
u64.check = i => typeof i === "bigint" && i >= 0n && i <= 0xffffffffffffffffn;
u64.wrap = i => BigInt.asUintN(64, i);
u64.clamp = i => {
  if (i < 0n) {
    return 0n;
  } else if (i > 0xffffffffffffffffn) {
    return 0xffffffffffffffffn;
  } else {
    return i;
  }
};
// u64.toBase64 = (i: u64): string => "0";
// u64.tryFromBase64 = (s: string): u64 | undefined => {
//     if (s.length !== 11) {
//         return undefined;
//     }
//     const byteChars = atob(s.replace(/\+/g, '-').replace(/\//g, '_'));
//     for (let i = 0; i < byteChars.length; i++) {
//         bytes[i] = byteChars.charCodeAt(i);
//     }
// };
// u64.tryFromBase16 = (s: string): u64 | undefined => 0n;
// u64.tryFromBase10 = (s: string): u64 | undefined => {
//     const u = BigInt(i);
//     if (u < 0n || u > 0xFFFFFFFFFFFFFFFF) {
//         throw new TypeError(`u64 out of bounds: ${u}`);
//     }
//     return u;
// };
// u64.tryFrom = (s: string): u64 | undefined =>
//     u64.tryFromBase64(s) ??
//     u64.tryFromBase16(s) ??
// u64.tryFromBase10(s);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50cy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsiaW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVzVCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQVMsRUFBTyxFQUFFO0lBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sSUFBSSxTQUFTLENBQUMscUJBQXFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDM0Q7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQztBQUVGLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBRWhCLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFTLEVBQVksRUFBRSxDQUNsQyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFRaEYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBUyxFQUFPLEVBQUU7SUFDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQkFBcUIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUMzRDtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBRUYsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7QUFFaEIsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQVMsRUFBWSxFQUFFLENBQ2xDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxtQkFBbUIsQ0FBQztBQUUvRCxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBUyxFQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQVEsQ0FBQztBQUU1RCxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFPLEVBQUU7SUFDN0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ1YsT0FBTyxFQUFTLENBQUM7S0FDbEI7U0FBTSxJQUFJLENBQUMsR0FBRyxtQkFBbUIsRUFBRTtRQUNsQyxPQUFPLG1CQUEwQixDQUFDO0tBQ25DO1NBQU07UUFDTCxPQUFPLENBQVEsQ0FBQztLQUNqQjtBQUNILENBQUMsQ0FBQztBQUVGLDBDQUEwQztBQUMxQyx3REFBd0Q7QUFDeEQsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1QixRQUFRO0FBQ1IseUVBQXlFO0FBQ3pFLG1EQUFtRDtBQUNuRCw4Q0FBOEM7QUFDOUMsUUFBUTtBQUNSLEtBQUs7QUFDTCwwREFBMEQ7QUFDMUQsd0RBQXdEO0FBQ3hELDJCQUEyQjtBQUMzQiw4Q0FBOEM7QUFDOUMsMERBQTBEO0FBQzFELFFBQVE7QUFDUixnQkFBZ0I7QUFDaEIsS0FBSztBQUNMLGdEQUFnRDtBQUNoRCw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFVuaXF1ZSBzeW1ib2wgdXNlZCBmb3Igb3VyIHR5cGUgYnJhbmRzLiBVbnVzZWQgYXQgcnVudGltZS5cbmNvbnN0IHR5cGUgPSBTeW1ib2woXCJ0eXBlXCIpO1xudHlwZSBPcHRpb25hbGx5QnJhbmRlZDxCYXNlLCBOYW1lLCBEZWZhdWx0PiA9IEJhc2UgJlxuICAoeyBbdHlwZV0/OiBOYW1lIH0gfCBEZWZhdWx0KTtcbnR5cGUgQnJhbmRlZDxCYXNlLCBOYW1lLCBEZWZhdWx0PiA9IEJhc2UgJiAoeyBbdHlwZV06IE5hbWUgfSB8IERlZmF1bHQpO1xuXG4vLyBTdGFuZGFyZCBudW1iZXIsIDY0IGJpdCBmbG9hdGluZyBwb2ludC5cbmV4cG9ydCB0eXBlIGY2NCA9IE9wdGlvbmFsbHlCcmFuZGVkPG51bWJlciwgXCJmNjRcIiwgMC4wPjtcblxuLy8gbnVtYmVyIGNvbnN0cmFpbmVkIHRvIHUzMiByYW5nZS5cbmV4cG9ydCB0eXBlIHUzMiA9IEJyYW5kZWQ8bnVtYmVyLCBcInUzMlwiLCAwPjtcblxuZXhwb3J0IGNvbnN0IHUzMiA9IChpOiBudW1iZXIpOiB1MzIgPT4ge1xuICBpZiAoIXUzMi5jaGVjayhpKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGV4cGVjdGVkIHUzMiwgZ290ICR7dHlwZW9mIGl9ICR7aX1gKTtcbiAgfVxuICByZXR1cm4gaTtcbn07XG5cbnUzMi5ndWFyZCA9IHUzMjtcblxudTMyLmNoZWNrID0gKGk6IG51bWJlcik6IGkgaXMgdTMyID0+XG4gIHR5cGVvZiBpID09PSBcIm51bWJlclwiICYmIGkgPj0gMCAmJiBpIDw9IDB4ZmZmZmZmZmYgJiYgTnVtYmVyLmlzU2FmZUludGVnZXIoaSk7XG5cbi8vIFN0YW5kYXJkIGJpZ2ludCwgc2lnbmVkLlxuZXhwb3J0IHR5cGUgaUJpZyA9IE9wdGlvbmFsbHlCcmFuZGVkPGJpZ2ludCwgXCJpQmlnXCIsIDBuPjtcblxuLy8gYmlnaW50IGNvbnN0cmFpbmVkIHRvIHU2NCByYW5nZS5cbmV4cG9ydCB0eXBlIHU2NCA9IEJyYW5kZWQ8YmlnaW50LCBcInU2NFwiLCAwbj47XG5cbmV4cG9ydCBjb25zdCB1NjQgPSAoaTogYmlnaW50KTogdTY0ID0+IHtcbiAgaWYgKCF1NjQuY2hlY2soaSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBleHBlY3RlZCB1NjQsIGdvdCAke3R5cGVvZiBpfSAke2l9YCk7XG4gIH1cbiAgcmV0dXJuIGk7XG59O1xuXG51NjQuZ3VhcmQgPSB1NjQ7XG5cbnU2NC5jaGVjayA9IChpOiBiaWdpbnQpOiBpIGlzIHU2NCA9PlxuICB0eXBlb2YgaSA9PT0gXCJiaWdpbnRcIiAmJiBpID49IDBuICYmIGkgPD0gMHhmZmZmZmZmZmZmZmZmZmZmbjtcblxudTY0LndyYXAgPSAoaTogYmlnaW50KTogdTY0ID0+IEJpZ0ludC5hc1VpbnROKDY0LCBpKSBhcyB1NjQ7XG5cbnU2NC5jbGFtcCA9IChpOiBiaWdpbnQpOiB1NjQgPT4ge1xuICBpZiAoaSA8IDBuKSB7XG4gICAgcmV0dXJuIDBuIGFzIHU2NDtcbiAgfSBlbHNlIGlmIChpID4gMHhmZmZmZmZmZmZmZmZmZmZmbikge1xuICAgIHJldHVybiAweGZmZmZmZmZmZmZmZmZmZmZuIGFzIHU2NDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaSBhcyB1NjQ7XG4gIH1cbn07XG5cbi8vIHU2NC50b0Jhc2U2NCA9IChpOiB1NjQpOiBzdHJpbmcgPT4gXCIwXCI7XG4vLyB1NjQudHJ5RnJvbUJhc2U2NCA9IChzOiBzdHJpbmcpOiB1NjQgfCB1bmRlZmluZWQgPT4ge1xuLy8gICAgIGlmIChzLmxlbmd0aCAhPT0gMTEpIHtcbi8vICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgICAgY29uc3QgYnl0ZUNoYXJzID0gYXRvYihzLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpKTtcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVDaGFycy5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgICBieXRlc1tpXSA9IGJ5dGVDaGFycy5jaGFyQ29kZUF0KGkpO1xuLy8gICAgIH1cbi8vIH07XG4vLyB1NjQudHJ5RnJvbUJhc2UxNiA9IChzOiBzdHJpbmcpOiB1NjQgfCB1bmRlZmluZWQgPT4gMG47XG4vLyB1NjQudHJ5RnJvbUJhc2UxMCA9IChzOiBzdHJpbmcpOiB1NjQgfCB1bmRlZmluZWQgPT4ge1xuLy8gICAgIGNvbnN0IHUgPSBCaWdJbnQoaSk7XG4vLyAgICAgaWYgKHUgPCAwbiB8fCB1ID4gMHhGRkZGRkZGRkZGRkZGRkZGKSB7XG4vLyAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHU2NCBvdXQgb2YgYm91bmRzOiAke3V9YCk7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiB1O1xuLy8gfTtcbi8vIHU2NC50cnlGcm9tID0gKHM6IHN0cmluZyk6IHU2NCB8IHVuZGVmaW5lZCA9PlxuLy8gICAgIHU2NC50cnlGcm9tQmFzZTY0KHMpID8/XG4vLyAgICAgdTY0LnRyeUZyb21CYXNlMTYocykgPz9cbi8vIHU2NC50cnlGcm9tQmFzZTEwKHMpO1xuIl19
