#!/bin/bash
set -euo pipefail;
shopt -s globstar nullglob;
cd "$(dirname "${BASH_SOURCE}")";

if [ -z "${npm_package_name:-}" ]; then
    if [ -e "${HOME}/.nvm/nvm.sh" ]; then
        source "${HOME}/.nvm/nvm.sh";
        nvm use default;
        node_version="$(node -p 'require("./package.json").engines.node')";
        nvm install "${node_version}";
        nvm use "${node_version}";
    fi

    yarn install;
    exec yarn build "$@";
fi

dist="./docs";

sync;

if [ -e "./build.pid" ]; then
    killtree() {
        # from https://stackoverflow.com/a/3211182/1114
        local _pid="$1";
        kill -stop "${_pid}";
        for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
            killtree "${_child}";
        done
        kill -9 "${_pid}";
    }

    killtree "$(cat "./build.pid")" 9 || printf "⚠️ Outdated pidfile?\n";
    printf "$BASHPID" > "./build.pid";
    sync;
    for n in {4..1}; do
        printf '\n%.0s' {1..12};
        printf "🛑 Interrupted existing build. Debouncing for ${n}s... ";
        sleep 1;
    done
    printf "👍 Restarting build.\n"
else
    printf "$BASHPID" > "./build.pid";
fi

sync;

set -x;

import-sort --write "./src/"**/*"."{"j","t"}"s"{,"x"};

node_version="$(node --version)";
replace-in-files --regex='"version"\s*:\s*"(.*?)"' --replacement='"version": "'"$(date --utc "+%Y.%-m.%-d")"'"' "./package.json" "./src/manifest.json";
replace-in-files --regex='"version_name"\s*:\s*"(.*?)"' --replacement='"version_name": "'"$(date --utc "+%Y-%m-%d")"'"' "./src/manifest.json";
replace-in-files --regex='"node"\s*:\s*"(.*?)"' --replacement='"node": "'"${node_version}"'"' "./package.json";
replace-in-files --regex='"node_version"\s*:\s*"(.*?)"' --replacement='"node_version": "'"${node_version}"'"' "./.github/workflows/build.yml";

rm -rf "${dist}"/*;

cp -r "./src/"* "./data/"* "./static/"* "${dist}/";
cp "./node_modules/webextension-polyfill/dist/browser-polyfill.js"{"",".map"} "${dist}/";
cp "./src/index.html" "${dist}/.htm";

tsc || printf "\n⚠️ TypeScript is confused. 😟\n\n";

sort-json "./"*".json" {"./src","./docs","./data","./.vscode","./.github"}"/"**/*"."{"json","yml","yaml"};
prettier --write "./"*".json" "./data/" "./.vscode/" "./.github/" "./src/" "${dist}";
prettier --write --parser=json "./.github/"**/*"."{"yml","yaml"};

date -u +%s > "${dist}/timestamp.json";

rm "./build.pid";

printf "\n\n\n\n\n\n\n\n\n\n\n\n✔️ Build complete. ";
