/// Generates a local key that orders SKUs by type, truncated app ID, and
/// truncated SKU ID, and includes a potentially-truncated copy of the SKU's
/// name. The ordering should be adequate for tree indexing if we ever use it,
/// while potentially providing some minimal human-readability.
export const localKey = sku => {
  const length = 32;
  const maxNameLength = 23;
  const typeTag =
    { game: "g", addon: "o", bundle: "x", subscription: "c" }[sku.type] ??
    `?${sku.type}?`;
  const idsPrefix = sku.app.slice(0, 6) + sku.sku.slice(0, 2);
  const idsRest = sku.app.slice(6) + sku.sku.slice(2);
  let name = (sku.name + sku.internalSlug)
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "");
  if (name.length > maxNameLength) {
    const letterCounts = {};
    for (const letter of name) {
      letterCounts[letter] = (letterCounts[letter] || 0) + 1;
    }
    while (name.length > maxNameLength) {
      const mostFrequentCount = Math.max(...Object.values(letterCounts));
      const mostFrequent = Object.entries(letterCounts)
        .filter(([_letter, count]) => count == mostFrequentCount)
        .map(([letter, _count]) => letter);
      for (let i = name.length - 1; i >= 0; i -= 1) {
        const letter = name[i];
        if (mostFrequent.includes(letter)) {
          name = name.slice(0, i) + name.slice(i + 1);
          letterCounts[letter] -= 1;
          break;
        }
      }
    }
  }
  return (typeTag + idsPrefix + name + idsRest).slice(0, length);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwta2V5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJmb3JlZ3JvdW5kL2RhdGEvbG9jYWwta2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHlFQUF5RTtBQUN6RSw0RUFBNEU7QUFDNUUsOEVBQThFO0FBQzlFLCtEQUErRDtBQUMvRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFvQixFQUFFLEVBQUU7SUFDL0MsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUN6QixNQUFNLE9BQU8sR0FDVixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQVUsQ0FDaEUsR0FBRyxDQUFDLElBQUksQ0FDVCxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO0lBQ3ZCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7U0FDckMsV0FBVyxFQUFFO1NBQ2IsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU5QixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxFQUFFO1FBQy9CLE1BQU0sWUFBWSxHQUEyQixFQUFFLENBQUM7UUFDaEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDekIsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4RDtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLEVBQUU7WUFDbEMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO2lCQUM5QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLGlCQUFpQixDQUFDO2lCQUN4RCxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzVDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUNqQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQzVDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzFCLE1BQU07aUJBQ1A7YUFDRjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNqRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Ta3UsIFNrdSB9IGZyb20gXCIuL21vZGVscy5qc1wiO1xuXG4vLy8gR2VuZXJhdGVzIGEgbG9jYWwga2V5IHRoYXQgb3JkZXJzIFNLVXMgYnkgdHlwZSwgdHJ1bmNhdGVkIGFwcCBJRCwgYW5kXG4vLy8gdHJ1bmNhdGVkIFNLVSBJRCwgYW5kIGluY2x1ZGVzIGEgcG90ZW50aWFsbHktdHJ1bmNhdGVkIGNvcHkgb2YgdGhlIFNLVSdzXG4vLy8gbmFtZS4gVGhlIG9yZGVyaW5nIHNob3VsZCBiZSBhZGVxdWF0ZSBmb3IgdHJlZSBpbmRleGluZyBpZiB3ZSBldmVyIHVzZSBpdCxcbi8vLyB3aGlsZSBwb3RlbnRpYWxseSBwcm92aWRpbmcgc29tZSBtaW5pbWFsIGh1bWFuLXJlYWRhYmlsaXR5LlxuZXhwb3J0IGNvbnN0IGxvY2FsS2V5ID0gKHNrdTogU2t1IHwgQ29tbW9uU2t1KSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IDMyO1xuICBjb25zdCBtYXhOYW1lTGVuZ3RoID0gMjM7XG4gIGNvbnN0IHR5cGVUYWcgPVxuICAgICh7IGdhbWU6IFwiZ1wiLCBhZGRvbjogXCJvXCIsIGJ1bmRsZTogXCJ4XCIsIHN1YnNjcmlwdGlvbjogXCJjXCIgfSBhcyBhbnkpW1xuICAgICAgc2t1LnR5cGVcbiAgICBdID8/IGA/JHtza3UudHlwZX0/YDtcbiAgY29uc3QgaWRzUHJlZml4ID0gc2t1LmFwcC5zbGljZSgwLCA2KSArIHNrdS5za3Uuc2xpY2UoMCwgMik7XG4gIGNvbnN0IGlkc1Jlc3QgPSBza3UuYXBwLnNsaWNlKDYpICsgc2t1LnNrdS5zbGljZSgyKTtcblxuICBsZXQgbmFtZSA9IChza3UubmFtZSArIHNrdS5pbnRlcm5hbFNsdWcpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvW15hLXowLTldKy9nLCBcIlwiKTtcblxuICBpZiAobmFtZS5sZW5ndGggPiBtYXhOYW1lTGVuZ3RoKSB7XG4gICAgY29uc3QgbGV0dGVyQ291bnRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gICAgZm9yIChjb25zdCBsZXR0ZXIgb2YgbmFtZSkge1xuICAgICAgbGV0dGVyQ291bnRzW2xldHRlcl0gPSAobGV0dGVyQ291bnRzW2xldHRlcl0gfHwgMCkgKyAxO1xuICAgIH1cbiAgICB3aGlsZSAobmFtZS5sZW5ndGggPiBtYXhOYW1lTGVuZ3RoKSB7XG4gICAgICBjb25zdCBtb3N0RnJlcXVlbnRDb3VudCA9IE1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMobGV0dGVyQ291bnRzKSk7XG4gICAgICBjb25zdCBtb3N0RnJlcXVlbnQgPSBPYmplY3QuZW50cmllcyhsZXR0ZXJDb3VudHMpXG4gICAgICAgIC5maWx0ZXIoKFtfbGV0dGVyLCBjb3VudF0pID0+IGNvdW50ID09IG1vc3RGcmVxdWVudENvdW50KVxuICAgICAgICAubWFwKChbbGV0dGVyLCBfY291bnRdKSA9PiBsZXR0ZXIpO1xuICAgICAgZm9yIChsZXQgaSA9IG5hbWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgY29uc3QgbGV0dGVyID0gbmFtZVtpXTtcbiAgICAgICAgaWYgKG1vc3RGcmVxdWVudC5pbmNsdWRlcyhsZXR0ZXIpKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgaSkgKyBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICBsZXR0ZXJDb3VudHNbbGV0dGVyXSAtPSAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICh0eXBlVGFnICsgaWRzUHJlZml4ICsgbmFtZSArIGlkc1Jlc3QpLnNsaWNlKDAsIGxlbmd0aCk7XG59O1xuIl19
