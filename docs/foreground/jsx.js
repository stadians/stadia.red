const renderChild = content => {
  if (content === null || content === undefined) {
    return document.createElement("span");
  } else if (content instanceof Node) {
    return content;
  } else if (
    typeof content === "string" ||
    typeof content === "number" ||
    typeof content === "boolean"
  ) {
    return document.createTextNode(String(content));
  } else {
    const container = document.createDocumentFragment();
    for (const child of content) {
      container.appendChild(renderChild(child));
    }
    return container;
  }
};
const componentsByName = new Map();
const namesByComponent = new Map();
export const createElement = (type, props, ...children) => {
  props = { ...(props || {}) };
  const style = props.style;
  delete props.style;
  let el;
  if (typeof type === "string") {
    el = document.createElement(type);
    Object.assign(el, props);
    el.appendChild(renderChild(children));
  } else {
    let name = namesByComponent.get(type);
    if (!name) {
      const ownName = type.name || "_component";
      let count = 1;
      name = ownName;
      while (componentsByName.has(name)) {
        count += 1;
        name = ownName + count;
      }
      if (type.name && count > 1) {
        console.warn(
          `Multiple (${count}) components named ${type.name} in use.`,
        );
      }
      componentsByName.set(name, type);
      namesByComponent.set(type, name);
    }
    el = type(Object.assign(props, { children }));
    if (type.name) {
      el.classList.add(name);
    }
  }
  if (style) {
    Object.assign(el.style, style);
  }
  return el;
};
Object.assign(window, {
  JSX: {
    createElement,
  },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJmb3JlZ3JvdW5kL2pzeC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQW1CLEVBQVEsRUFBRTtJQUNoRCxJQUFJLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUM3QyxPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkM7U0FBTSxJQUFJLE9BQU8sWUFBWSxJQUFJLEVBQUU7UUFDbEMsT0FBTyxPQUFPLENBQUM7S0FDaEI7U0FBTSxJQUNMLE9BQU8sT0FBTyxLQUFLLFFBQVE7UUFDM0IsT0FBTyxPQUFPLEtBQUssUUFBUTtRQUMzQixPQUFPLE9BQU8sS0FBSyxTQUFTLEVBQzVCO1FBQ0EsT0FBTyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ2pEO1NBQU07UUFDTCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNwRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE9BQU8sRUFBRTtZQUMzQixTQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxTQUFTLENBQUM7S0FDbEI7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDbkMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUMzQixJQUFtRSxFQUNuRSxLQUEwQixFQUMxQixHQUFHLFFBQTJCLEVBQ2pCLEVBQUU7SUFDZixLQUFLLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDN0IsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMxQixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFFbkIsSUFBSSxFQUFlLENBQUM7SUFDcEIsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDNUIsRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztLQUN2QztTQUFNO1FBQ0wsSUFBSSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQztZQUMxQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDZCxJQUFJLEdBQUcsT0FBTyxDQUFDO1lBRWYsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2pDLEtBQUssSUFBSSxDQUFDLENBQUM7Z0JBQ1gsSUFBSSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDeEI7WUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtnQkFDMUIsT0FBTyxDQUFDLElBQUksQ0FDVixhQUFhLEtBQUssc0JBQXNCLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FDNUQsQ0FBQzthQUNIO1lBRUQsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2xDO1FBQ0QsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtLQUNGO0lBRUQsSUFBSSxLQUFLLEVBQUU7UUFDVCxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDaEM7SUFFRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0lBQ3BCLEdBQUcsRUFBRTtRQUNILGFBQWE7S0FDZDtDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIFJlbmRlcmFibGUgPSBKU1guUmVuZGVyYWJsZTtcblxuY29uc3QgcmVuZGVyQ2hpbGQgPSAoY29udGVudDogUmVuZGVyYWJsZSk6IE5vZGUgPT4ge1xuICBpZiAoY29udGVudCA9PT0gbnVsbCB8fCBjb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gIH0gZWxzZSBpZiAoY29udGVudCBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfSBlbHNlIGlmIChcbiAgICB0eXBlb2YgY29udGVudCA9PT0gXCJzdHJpbmdcIiB8fFxuICAgIHR5cGVvZiBjb250ZW50ID09PSBcIm51bWJlclwiIHx8XG4gICAgdHlwZW9mIGNvbnRlbnQgPT09IFwiYm9vbGVhblwiXG4gICkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY29udGVudCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNvbnRlbnQpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJDaGlsZChjaGlsZCkpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9XG59O1xuXG5jb25zdCBjb21wb25lbnRzQnlOYW1lID0gbmV3IE1hcCgpO1xuY29uc3QgbmFtZXNCeUNvbXBvbmVudCA9IG5ldyBNYXAoKTtcbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50ID0gKFxuICB0eXBlOiBzdHJpbmcgfCAoKHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBSZW5kZXJhYmxlPikgPT4gSFRNTEVsZW1lbnQpLFxuICBwcm9wczogUmVjb3JkPHN0cmluZywgYW55PixcbiAgLi4uY2hpbGRyZW46IEFycmF5PFJlbmRlcmFibGU+XG4pOiBIVE1MRWxlbWVudCA9PiB7XG4gIHByb3BzID0geyAuLi4ocHJvcHMgfHwge30pIH07XG4gIGNvbnN0IHN0eWxlID0gcHJvcHMuc3R5bGU7XG4gIGRlbGV0ZSBwcm9wcy5zdHlsZTtcblxuICBsZXQgZWw6IEhUTUxFbGVtZW50O1xuICBpZiAodHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgT2JqZWN0LmFzc2lnbihlbCwgcHJvcHMpO1xuICAgIGVsLmFwcGVuZENoaWxkKHJlbmRlckNoaWxkKGNoaWxkcmVuKSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5hbWUgPSBuYW1lc0J5Q29tcG9uZW50LmdldCh0eXBlKTtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIGNvbnN0IG93bk5hbWUgPSB0eXBlLm5hbWUgfHwgXCJfY29tcG9uZW50XCI7XG4gICAgICBsZXQgY291bnQgPSAxO1xuICAgICAgbmFtZSA9IG93bk5hbWU7XG5cbiAgICAgIHdoaWxlIChjb21wb25lbnRzQnlOYW1lLmhhcyhuYW1lKSkge1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICBuYW1lID0gb3duTmFtZSArIGNvdW50O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZS5uYW1lICYmIGNvdW50ID4gMSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYE11bHRpcGxlICgke2NvdW50fSkgY29tcG9uZW50cyBuYW1lZCAke3R5cGUubmFtZX0gaW4gdXNlLmAsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbXBvbmVudHNCeU5hbWUuc2V0KG5hbWUsIHR5cGUpO1xuICAgICAgbmFtZXNCeUNvbXBvbmVudC5zZXQodHlwZSwgbmFtZSk7XG4gICAgfVxuICAgIGVsID0gdHlwZShPYmplY3QuYXNzaWduKHByb3BzLCB7IGNoaWxkcmVuIH0pKTtcbiAgICBpZiAodHlwZS5uYW1lKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKG5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdHlsZSkge1xuICAgIE9iamVjdC5hc3NpZ24oZWwuc3R5bGUsIHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBlbDtcbn07XG5cbk9iamVjdC5hc3NpZ24od2luZG93LCB7XG4gIEpTWDoge1xuICAgIGNyZWF0ZUVsZW1lbnQsXG4gIH0sXG59KTtcbiJdfQ==
