const renderChild = content => {
  if (content === null || content === undefined) {
    return document.createElement("span");
  } else if (content instanceof Node) {
    return content;
  } else if (
    typeof content === "string" ||
    typeof content === "number" ||
    typeof content === "boolean"
  ) {
    return document.createTextNode(String(content));
  } else {
    const container = document.createDocumentFragment();
    for (const child of content) {
      container.appendChild(renderChild(child));
    }
    return container;
  }
};
const componentsByName = new Map();
const namesByComponent = new Map();
export const createElement = (type, props, ...children) => {
  const nativeProps = { ...(props || {}) };
  const style = nativeProps.style;
  delete nativeProps.style;
  let el;
  if (typeof type === "string") {
    el = document.createElement(type);
    Object.assign(el, nativeProps);
    el.appendChild(renderChild(children));
  } else {
    let name = namesByComponent.get(type);
    if (!name) {
      const ownName = type.name || "_component";
      let count = 1;
      name = ownName;
      while (componentsByName.has(name)) {
        count += 1;
        name = ownName + count;
      }
      if (type.name && count > 1) {
        console.warn(
          `Multiple (${count}) components named ${type.name} in use.`,
        );
      }
      componentsByName.set(name, type);
      namesByComponent.set(type, name);
      type.style = { gridArea: name, ...type.style };
      if (type.style) {
        const el = document.querySelector("style");
        const sheet = el.sheet;
        const i = sheet.insertRule(`.${name}{}`, sheet.rules.length);
        Object.assign(sheet.rules[i].style, type.style);
        // HACK: these changes will work but will be confusingly invisible in the DOM so we write them back:
        el.textContent = Array.from(sheet.rules)
          .map(r => r.cssText)
          .join("\n");
      }
    }
    el = type(Object.assign(nativeProps, { children }));
    if (type.name) {
      el.classList.add(name);
    }
  }
  if (style) {
    Object.assign(el.style, style);
  }
  return el;
};
export const fragment = (...fragments) => {
  if (fragments.length === 1) {
    return fragments[0];
  }
  const result = document.createDocumentFragment();
  for (const fragment of fragments) {
    result.appendChild(fragment);
  }
  return result;
};
Object.assign(window, {
  JSX: {
    createElement,
  },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJmb3JlZ3JvdW5kL2pzeC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQW1CLEVBQVEsRUFBRTtJQUNoRCxJQUFJLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUM3QyxPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkM7U0FBTSxJQUFJLE9BQU8sWUFBWSxJQUFJLEVBQUU7UUFDbEMsT0FBTyxPQUFPLENBQUM7S0FDaEI7U0FBTSxJQUNMLE9BQU8sT0FBTyxLQUFLLFFBQVE7UUFDM0IsT0FBTyxPQUFPLEtBQUssUUFBUTtRQUMzQixPQUFPLE9BQU8sS0FBSyxTQUFTLEVBQzVCO1FBQ0EsT0FBTyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ2pEO1NBQU07UUFDTCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNwRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE9BQU8sRUFBRTtZQUMzQixTQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxTQUFTLENBQUM7S0FDbEI7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDbkMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUMzQixJQUE0QixFQUM1QixLQUFZLEVBQ1osR0FBRyxRQUEyQixFQUNqQixFQUFFO0lBQ2YsTUFBTSxXQUFXLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDekMsTUFBTSxLQUFLLEdBQUcs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QUMxQixPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyQjtJQUNELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2pELEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtJQUNwQixHQUFHLEVBQUU7UUFDSCxhQUFhO0tBQ2Q7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBSZW5kZXJhYmxlID0gSlNYLlJlbmRlcmFibGU7XG5cbmNvbnN0IHJlbmRlckNoaWxkID0gKGNvbnRlbnQ6IFJlbmRlcmFibGUpOiBOb2RlID0+IHtcbiAgaWYgKGNvbnRlbnQgPT09IG51bGwgfHwgY29udGVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICB9IGVsc2UgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH0gZWxzZSBpZiAoXG4gICAgdHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIgfHxcbiAgICB0eXBlb2YgY29udGVudCA9PT0gXCJudW1iZXJcIiB8fFxuICAgIHR5cGVvZiBjb250ZW50ID09PSBcImJvb2xlYW5cIlxuICApIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvbnRlbnQpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjb250ZW50KSB7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyQ2hpbGQoY2hpbGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxufTtcblxuY29uc3QgY29tcG9uZW50c0J5TmFtZSA9IG5ldyBNYXAoKTtcbmNvbnN0IG5hbWVzQnlDb21wb25lbnQgPSBuZXcgTWFwKCk7XG5leHBvcnQgY29uc3QgY3JlYXRlRWxlbWVudCA9IDxQcm9wcyBleHRlbmRzIHt9ID0ge30+KFxuICB0eXBlOiBzdHJpbmcgfCBKU1guRkM8UHJvcHM+LFxuICBwcm9wczogUHJvcHMsXG4gIC4uLmNoaWxkcmVuOiBBcnJheTxSZW5kZXJhYmxlPlxuKTogSFRNTEVsZW1lbnQgPT4ge1xuICBjb25zdCBuYXRpdmVQcm9wcyA9IHsgLi4uKHByb3BzIHx8IHt9KSB9O1xuICBjb25zdCBzdHlsZSA9IG5hdGl2ZVByb3BzLnN0eWxlO1xuICBkZWxldGUgbmF0aXZlUHJvcHMuc3R5bGU7XG5cbiAgbGV0IGVsOiBIVE1MRWxlbWVudDtcbiAgaWYgKHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgIE9iamVjdC5hc3NpZ24oZWwsIG5hdGl2ZVByb3BzKTtcbiAgICBlbC5hcHBlbmRDaGlsZChyZW5kZXJDaGlsZChjaGlsZHJlbikpO1xuICB9IGVsc2Uge1xuICAgIGxldCBuYW1lID0gbmFtZXNCeUNvbXBvbmVudC5nZXQodHlwZSk7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBjb25zdCBvd25OYW1lID0gdHlwZS5uYW1lIHx8IFwiX2NvbXBvbmVudFwiO1xuICAgICAgbGV0IGNvdW50ID0gMTtcbiAgICAgIG5hbWUgPSBvd25OYW1lO1xuXG4gICAgICB3aGlsZSAoY29tcG9uZW50c0J5TmFtZS5oYXMobmFtZSkpIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgICAgbmFtZSA9IG93bk5hbWUgKyBjb3VudDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUubmFtZSAmJiBjb3VudCA+IDEpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBNdWx0aXBsZSAoJHtjb3VudH0pIGNvbXBvbmVudHMgbmFtZWQgJHt0eXBlLm5hbWV9IGluIHVzZS5gLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb21wb25lbnRzQnlOYW1lLnNldChuYW1lLCB0eXBlKTtcbiAgICAgIG5hbWVzQnlDb21wb25lbnQuc2V0KHR5cGUsIG5hbWUpO1xuXG4gICAgICB0eXBlLnN0eWxlID0geyBncmlkQXJlYTogbmFtZSwgLi4udHlwZS5zdHlsZSB9O1xuXG4gICAgICBpZiAodHlwZS5zdHlsZSkge1xuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVwiKSE7XG4gICAgICAgIGNvbnN0IHNoZWV0OiBDU1NTdHlsZVNoZWV0ID0gZWwuc2hlZXQgYXMgYW55O1xuICAgICAgICBjb25zdCBpID0gc2hlZXQuaW5zZXJ0UnVsZShgLiR7bmFtZX17fWAsIHNoZWV0LnJ1bGVzLmxlbmd0aCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oc2hlZXQucnVsZXNbaV0uc3R5bGUsIHR5cGUuc3R5bGUpO1xuICAgICAgICAvLyBIQUNLOiB0aGVzZSBjaGFuZ2VzIHdpbGwgd29yayBidXQgd2lsbCBiZSBjb25mdXNpbmdseSBpbnZpc2libGUgaW4gdGhlIERPTSBzbyB3ZSB3cml0ZSB0aGVtIGJhY2s6XG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gQXJyYXkuZnJvbShzaGVldC5ydWxlcylcbiAgICAgICAgICAubWFwKHIgPT4gci5jc3NUZXh0KVxuICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbCA9IHR5cGUoT2JqZWN0LmFzc2lnbihuYXRpdmVQcm9wcywgeyBjaGlsZHJlbiB9KSk7XG4gICAgaWYgKHR5cGUubmFtZSkge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChuYW1lKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3R5bGUpIHtcbiAgICBPYmplY3QuYXNzaWduKGVsLnN0eWxlLCBzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gZWw7XG59O1xuXG5leHBvcnQgY29uc3QgZnJhZ21lbnQgPSAoXG4gIC4uLmZyYWdtZW50czogQXJyYXk8RG9jdW1lbnRGcmFnbWVudCB8IEVsZW1lbnQ+XG4pOiBEb2N1bWVudEZyYWdtZW50IHwgRWxlbWVudCA9PiB7XG4gIGlmIChmcmFnbWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZyYWdtZW50c1swXTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIGZvciAoY29uc3QgZnJhZ21lbnQgb2YgZnJhZ21lbnRzKSB7XG4gICAgcmVzdWx0LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuT2JqZWN0LmFzc2lnbih3aW5kb3csIHtcbiAgSlNYOiB7XG4gICAgY3JlYXRlRWxlbWVudCxcbiAgfSxcbn0pO1xuIl19
