import * as records from "../records.js";
export class DataStore {
  constructor() {
    this.skusById = new Map();
  }
  static async open() {
    const data = new DataStore();
    await data.load();
    return data;
  }
  async migrate() {
    // Update to clear existing data when making incompatible schema changes.
    const schema = 20200205;
    const existingSchema = (await browser.storage.local.get("schema")).schema;
    if (schema !== existingSchema) {
      console.info(
        `Resetting extension storage (data schema was ${existingSchema} but we need ${schema}).`
      );
      await browser.storage.local.clear();
      await browser.storage.local.set({ schema });
    }
  }
  async load() {
    await this.migrate();
    const { skusById } = await browser.storage.local.get(["skusById"]);
    console.debug("i'd like to load", skusById);
  }
  async save() {
    await this.migrate();
    await browser.storage.local.set({
      skusById: records.sorted(Object.fromEntries(this.skusById.entries())),
    });
  }
  values() {
    return this.skusById.values();
  }
  get(id) {
    return this.skusById.get(id);
  }
  upsert(sku) {
    const existing = this.skusById.get(sku.sku);
    if (existing === undefined) {
      this.skusById.set(sku.sku, sku);
      console.info("SKU added", sku);
      return sku;
    }
    if (existing !== sku) {
      if (JSON.stringify(existing) !== JSON.stringify(sku)) {
        const previous = { ...existing };
        console.info(
          "SKU updated, adding",
          sku,
          "to",
          previous,
          "producing",
          existing
        );
        Object.assign(existing, sku);
      }
    }
    return existing;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImluZGV4L2RhdGEvc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE9BQU8sTUFBTSxlQUFlLENBQUM7QUFJekMsTUFBTSxPQUFPLFNBQVM7SUFHcEI7UUFGUSxhQUFRLEdBQUcsSUFBSSxHQUFHLEVBQW1CLENBQUM7SUFFdkIsQ0FBQztJQUVqQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUk7UUFDdEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUM3QixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxLQUFLLENBQUMsT0FBTztRQUNuQix5RUFBeUU7UUFDekUsTUFBTSxNQUFNLEdBQUcsUUFBVSxDQUFDO1FBRTFCLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDMUUsSUFBSSxNQUFNLEtBQUssY0FBYyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxJQUFJLENBQ1YsZ0RBQWdELGNBQWMsZ0JBQWdCLE1BQU0sSUFBSSxDQUN6RixDQUFDO1lBQ0YsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNwQyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUk7UUFDZixNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2YsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckIsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDOUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDdEUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVNLEdBQUcsQ0FBQyxFQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFRO1FBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QyxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUMvQixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBRUQsSUFBSSxRQUFRLEtBQUssR0FBRyxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNwRCxNQUFNLFFBQVEsR0FBRyxFQUFFLEdBQUcsUUFBUSxFQUFFLENBQUM7Z0JBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQ1YscUJBQXFCLEVBQ3JCLEdBQUcsRUFDSCxJQUFJLEVBQ0osUUFBUSxFQUNSLFdBQVcsRUFDWCxRQUFRLENBQ1QsQ0FBQztnQkFDRixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUM5QjtTQUNGO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcmVjb3JkcyBmcm9tIFwiLi4vcmVjb3Jkcy5qc1wiO1xuXG5pbXBvcnQgeyBTa3UgfSBmcm9tIFwiLi9tb2RlbHMuanNcIjtcblxuZXhwb3J0IGNsYXNzIERhdGFTdG9yZSB7XG4gIHByaXZhdGUgc2t1c0J5SWQgPSBuZXcgTWFwPFNrdVtcInNrdVwiXSwgU2t1PigpO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgb3BlbigpIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IERhdGFTdG9yZSgpO1xuICAgIGF3YWl0IGRhdGEubG9hZCgpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtaWdyYXRlKCkge1xuICAgIC8vIFVwZGF0ZSB0byBjbGVhciBleGlzdGluZyBkYXRhIHdoZW4gbWFraW5nIGluY29tcGF0aWJsZSBzY2hlbWEgY2hhbmdlcy5cbiAgICBjb25zdCBzY2hlbWEgPSAyMF8yMDAyXzA1O1xuXG4gICAgY29uc3QgZXhpc3RpbmdTY2hlbWEgPSAoYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChcInNjaGVtYVwiKSkuc2NoZW1hO1xuICAgIGlmIChzY2hlbWEgIT09IGV4aXN0aW5nU2NoZW1hKSB7XG4gICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgIGBSZXNldHRpbmcgZXh0ZW5zaW9uIHN0b3JhZ2UgKGRhdGEgc2NoZW1hIHdhcyAke2V4aXN0aW5nU2NoZW1hfSBidXQgd2UgbmVlZCAke3NjaGVtYX0pLmBcbiAgICAgICk7XG4gICAgICBhd2FpdCBicm93c2VyLnN0b3JhZ2UubG9jYWwuY2xlYXIoKTtcbiAgICAgIGF3YWl0IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5zZXQoeyBzY2hlbWEgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5taWdyYXRlKCk7XG4gICAgY29uc3QgeyBza3VzQnlJZCB9ID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChbXCJza3VzQnlJZFwiXSk7XG4gICAgY29uc29sZS5kZWJ1ZyhcImknZCBsaWtlIHRvIGxvYWRcIiwgc2t1c0J5SWQpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNhdmUoKSB7XG4gICAgYXdhaXQgdGhpcy5taWdyYXRlKCk7XG4gICAgYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7XG4gICAgICBza3VzQnlJZDogcmVjb3Jkcy5zb3J0ZWQoT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuc2t1c0J5SWQuZW50cmllcygpKSksXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgdmFsdWVzKCk6IEl0ZXJhYmxlPFNrdT4ge1xuICAgIHJldHVybiB0aGlzLnNrdXNCeUlkLnZhbHVlcygpO1xuICB9XG5cbiAgcHVibGljIGdldChpZDogc3RyaW5nKTogU2t1IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5za3VzQnlJZC5nZXQoaWQpO1xuICB9XG5cbiAgcHVibGljIHVwc2VydChza3U6IFNrdSk6IFNrdSB7XG4gICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLnNrdXNCeUlkLmdldChza3Uuc2t1KTtcbiAgICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5za3VzQnlJZC5zZXQoc2t1LnNrdSwgc2t1KTtcbiAgICAgIGNvbnNvbGUuaW5mbyhcIlNLVSBhZGRlZFwiLCBza3UpO1xuICAgICAgcmV0dXJuIHNrdTtcbiAgICB9XG5cbiAgICBpZiAoZXhpc3RpbmcgIT09IHNrdSkge1xuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nKSAhPT0gSlNPTi5zdHJpbmdpZnkoc2t1KSkge1xuICAgICAgICBjb25zdCBwcmV2aW91cyA9IHsgLi4uZXhpc3RpbmcgfTtcbiAgICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICAgIFwiU0tVIHVwZGF0ZWQsIGFkZGluZ1wiLFxuICAgICAgICAgIHNrdSxcbiAgICAgICAgICBcInRvXCIsXG4gICAgICAgICAgcHJldmlvdXMsXG4gICAgICAgICAgXCJwcm9kdWNpbmdcIixcbiAgICAgICAgICBleGlzdGluZ1xuICAgICAgICApO1xuICAgICAgICBPYmplY3QuYXNzaWduKGV4aXN0aW5nLCBza3UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBleGlzdGluZztcbiAgfVxufVxuIl19
