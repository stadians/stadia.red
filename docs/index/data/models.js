import { flag } from "../flags.js";
import { localKey } from "./local-key.js";
export class Prices {
  constructor(
    countryCode,
    currencyCode,
    proPriceCents = null,
    proSalePriceCents = null,
    basePriceCents = null,
    baseSalePriceCents = null
  ) {
    this.countryCode = countryCode;
    this.currencyCode = currencyCode;
    this.proPriceCents = proPriceCents;
    this.proSalePriceCents = proSalePriceCents;
    this.basePriceCents = basePriceCents;
    this.baseSalePriceCents = baseSalePriceCents;
  }
  render() {
    // TODO: god remove this once you have fixed type serialization
    if (!this) return;
    if (this.basePriceCents) {
      return `${Math.floor(this.basePriceCents / 100)}.${String(
        this.basePriceCents % 100
      ).padStart(2, "0")} ${this.currencyCode} ${flag(this.countryCode)}`;
    } else {
      return `âˆž ${this.currencyCode} ${flag(this.countryCode)}`;
    }
  }
  static fromProto(data) {
    let countryCode = "??";
    let currencyCode = "???";
    let proPriceCents = null;
    let proSalePriceCents = null;
    let basePriceCents = null;
    let baseSalePriceCents = null;
    const priceScale = 10000;
    for (const priceData of data) {
      if (priceData[3]) countryCode = priceData[3];
      if (priceData[4]) currencyCode = priceData[4];
      let _timeSpan = [priceData[11], priceData[12]];
      let potentialBasePrice = priceData[6]?.[0]?.[0]
        ? priceData[6][0][0] / priceScale
        : null;
      let potentialProPrice = priceData[6]?.[2]?.[0]?.[2]?.[0]
        ? priceData[6][2][0][2][0] / priceScale
        : null;
      if (potentialBasePrice) basePriceCents = potentialBasePrice;
      if (potentialProPrice) proPriceCents = potentialProPrice;
    }
    return new Prices(
      countryCode,
      currencyCode,
      proPriceCents,
      proSalePriceCents,
      basePriceCents,
      baseSalePriceCents
    );
  }
}
export class CommonSku {
  constructor(app, sku, type, name, internalSlug, description, prices) {
    this.app = app;
    this.sku = sku;
    this.type = type;
    this.name = name;
    this.internalSlug = internalSlug;
    this.description = description;
    this.prices = prices;
    this.localKey = localKey(this);
  }
}
export class Game extends CommonSku {
  constructor(
    app,
    sku,
    type = "game",
    name,
    internalSlug,
    description,
    prices
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
    this.prices = prices;
  }
}
export class AddOn extends CommonSku {
  constructor(
    app,
    sku,
    type = "addon",
    name,
    internalSlug,
    description,
    prices
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
  }
}
export class Bundle extends CommonSku {
  constructor(
    app,
    sku,
    type = "bundle",
    name,
    internalSlug,
    description,
    prices,
    skus
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
    this.skus = skus;
  }
}
export class Subscription extends CommonSku {
  constructor(
    app,
    sku,
    type = "subscription",
    name,
    internalSlug,
    description,
    prices,
    skus
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
    this.skus = skus;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJpbmRleC9kYXRhL21vZGVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUkxQyxNQUFNLE9BQU8sTUFBTTtJQUNqQixZQUNXLFdBQW1DLEVBQ25DLFlBQW9DLEVBQ3BDLGdCQUErQixJQUFJLEVBQ25DLG9CQUFtQyxJQUFJLEVBQ3ZDLGlCQUFnQyxJQUFJLEVBQ3BDLHFCQUFvQyxJQUFJO1FBTHhDLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtRQUNuQyxpQkFBWSxHQUFaLFlBQVksQ0FBd0I7UUFDcEMsa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBQ25DLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBc0I7UUFDdkMsbUJBQWMsR0FBZCxjQUFjLENBQXNCO1FBQ3BDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBc0I7SUFDaEQsQ0FBQztJQUVHLE1BQU07UUFDWCwrREFBK0Q7UUFDL0QsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPO1FBRWxCLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN2QixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FDdkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQzFCLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztTQUNyRTthQUFNO1lBQ0wsT0FBTyxLQUFLLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJ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T0FBTyxLQUFNLFNBQVEsU0FBUztJQUNsQyxZQUNFLEdBQVcsRUFDWCxHQUFXLEVBQ0YsT0FBTyxPQUFnQixFQUNoQyxJQUFZLEVBQ1osWUFBb0IsRUFDcEIsV0FBbUIsRUFDbkIsTUFBYztRQUVkLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQU50RCxTQUFJLEdBQUosSUFBSSxDQUFtQjtJQU9sQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sTUFBTyxTQUFRLFNBQVM7SUFDbkMsWUFDRSxHQUFXLEVBQ1gsR0FBVyxFQUNGLE9BQU8sUUFBaUIsRUFDakMsSUFBWSxFQUNaLFlBQW9CLEVBQ3BCLFdBQW1CLEVBQ25CLE1BQWMsRUFDTCxJQUFtQjtRQUU1QixLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFQdEQsU0FBSSxHQUFKLElBQUksQ0FBb0I7UUFLeEIsU0FBSSxHQUFKLElBQUksQ0FBZTtJQUc5QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sWUFBYSxTQUFRLFNBQVM7SUFDekMsWUFDRSxHQUFXLEVBQ1gsR0FBVyxFQUNGLE9BQU8sY0FBdUIsRUFDdkMsSUFBWSxFQUNaLFlBQW9CLEVBQ3BCLFdBQW1CLEVBQ25CLE1BQWMsRUFDTCxJQUFtQjtRQUU1QixLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFQdEQsU0FBSSxHQUFKLElBQUksQ0FBMEI7UUFLOUIsU0FBSSxHQUFKLElBQUksQ0FBZTtJQUc5QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm90b0RhdGEgfSBmcm9tIFwiLi4vc3RhZGlhLmpzXCI7XG5pbXBvcnQgeyBSZW5kZXJhYmxlIH0gZnJvbSBcIi4uL2pzeC5qc1wiO1xuaW1wb3J0IHsgZmxhZyB9IGZyb20gXCIuLi9mbGFncy5qc1wiO1xuaW1wb3J0IHsgbG9jYWxLZXkgfSBmcm9tIFwiLi9sb2NhbC1rZXkuanNcIjtcblxuZXhwb3J0IHR5cGUgU2t1ID0gR2FtZSB8IEFkZE9uIHwgQnVuZGxlIHwgU3Vic2NyaXB0aW9uO1xuXG5leHBvcnQgY2xhc3MgUHJpY2VzIHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBjb3VudHJ5Q29kZTogc3RyaW5nICYgeyBsZW5ndGg6IDIgfSxcbiAgICByZWFkb25seSBjdXJyZW5jeUNvZGU6IHN0cmluZyAmIHsgbGVuZ3RoOiAzIH0sXG4gICAgcmVhZG9ubHkgcHJvUHJpY2VDZW50czogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgcmVhZG9ubHkgcHJvU2FsZVByaWNlQ2VudHM6IG51bWJlciB8IG51bGwgPSBudWxsLFxuICAgIHJlYWRvbmx5IGJhc2VQcmljZUNlbnRzOiBudW1iZXIgfCBudWxsID0gbnVsbCxcbiAgICByZWFkb25seSBiYXNlU2FsZVByaWNlQ2VudHM6IG51bWJlciB8IG51bGwgPSBudWxsXG4gICkge31cblxuICBwdWJsaWMgcmVuZGVyKCk6IFJlbmRlcmFibGUge1xuICAgIC8vIFRPRE86IGdvZCByZW1vdmUgdGhpcyBvbmNlIHlvdSBoYXZlIGZpeGVkIHR5cGUgc2VyaWFsaXphdGlvblxuICAgIGlmICghdGhpcykgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMuYmFzZVByaWNlQ2VudHMpIHtcbiAgICAgIHJldHVybiBgJHtNYXRoLmZsb29yKHRoaXMuYmFzZVByaWNlQ2VudHMgLyAxMDApfS4ke1N0cmluZyhcbiAgICAgICAgdGhpcy5iYXNlUHJpY2VDZW50cyAlIDEwMFxuICAgICAgKS5wYWRTdGFydCgyLCBcIjBcIil9ICR7dGhpcy5jdXJyZW5jeUNvZGV9ICR7ZmxhZyh0aGlzLmNvdW50cnlDb2RlKX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYOKIniAke3RoaXMuY3VycmVuY3lDb2RlfSAke2ZsYWcodGhpcy5jb3VudHJ5Q29kZSl9YDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZyb21Qcm90byhkYXRhOiBQcm90b0RhdGEpOiBQcmljZXMge1xuICAgIGxldCBjb3VudHJ5Q29kZTogc3RyaW5nICYgeyBsZW5ndGg6IDIgfSA9IFwiPz9cIiBhcyBhbnk7XG4gICAgbGV0IGN1cnJlbmN5Q29kZTogc3RyaW5nICYgeyBsZW5ndGg6IDMgfSA9IFwiPz8/XCIgYXMgYW55O1xuICAgIGxldCBwcm9QcmljZUNlbnRzID0gbnVsbDtcbiAgICBsZXQgcHJvU2FsZVByaWNlQ2VudHMgPSBudWxsO1xuICAgIGxldCBiYXNlUHJpY2VDZW50cyA9IG51bGw7XG4gICAgbGV0IGJhc2VTYWxlUHJpY2VDZW50cyA9IG51bGw7XG4gICAgY29uc3QgcHJpY2VTY2FsZSA9IDEwXzAwMDtcbiAgICBmb3IgKGNvbnN0IHByaWNlRGF0YSBvZiBkYXRhKSB7XG4gICAgICBpZiAocHJpY2VEYXRhWzNdKSBjb3VudHJ5Q29kZSA9IHByaWNlRGF0YVszXTtcbiAgICAgIGlmIChwcmljZURhdGFbNF0pIGN1cnJlbmN5Q29kZSA9IHByaWNlRGF0YVs0XTtcblxuICAgICAgbGV0IF90aW1lU3BhbiA9IFtwcmljZURhdGFbMTFdLCBwcmljZURhdGFbMTJdXTtcblxuICAgICAgbGV0IHBvdGVudGlhbEJhc2VQcmljZSA9IHByaWNlRGF0YVs2XT8uWzBdPy5bMF1cbiAgICAgICAgPyBwcmljZURhdGFbNl1bMF1bMF0gLyBwcmljZVNjYWxlXG4gICAgICAgIDogbnVsbDtcblxuICAgICAgbGV0IHBvdGVudGlhbFByb1ByaWNlID0gcHJpY2VEYXRhWzZdPy5bMl0/LlswXT8uWzJdPy5bMF1cbiAgICAgICAgPyBwcmljZURhdGFbNl1bMl1bMF1bMl1bMF0gLyBwcmljZVNjYWxlXG4gICAgICAgIDogbnVsbDtcblxuICAgICAgaWYgKHBvdGVudGlhbEJhc2VQcmljZSkgYmFzZVByaWNlQ2VudHMgPSBwb3RlbnRpYWxCYXNlUHJpY2U7XG4gICAgICBpZiAocG90ZW50aWFsUHJvUHJpY2UpIHByb1ByaWNlQ2VudHMgPSBwb3RlbnRpYWxQcm9QcmljZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcmljZXMoXG4gICAgICBjb3VudHJ5Q29kZSxcbiAgICAgIGN1cnJlbmN5Q29kZSxcbiAgICAgIHByb1ByaWNlQ2VudHMsXG4gICAgICBwcm9TYWxlUHJpY2VDZW50cyxcbiAgICAgIGJhc2VQcmljZUNlbnRzLFxuICAgICAgYmFzZVNhbGVQcmljZUNlbnRzXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tbW9uU2t1IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgYXBwOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgc2t1OiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgdHlwZTogXCJnYW1lXCIgfCBcImFkZG9uXCIgfCBcImJ1bmRsZVwiIHwgXCJzdWJzY3JpcHRpb25cIixcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgaW50ZXJuYWxTbHVnOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICByZWFkb25seSBwcmljZXM6IFByaWNlc1xuICApIHtcbiAgICB0aGlzLmxvY2FsS2V5ID0gbG9jYWxLZXkodGhpcyk7XG4gIH1cbiAgcmVhZG9ubHkgbG9jYWxLZXk6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEdhbWUgZXh0ZW5kcyBDb21tb25Ta3Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBhcHA6IHN0cmluZyxcbiAgICBza3U6IHN0cmluZyxcbiAgICByZWFkb25seSB0eXBlID0gXCJnYW1lXCIgYXMgY29uc3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGludGVybmFsU2x1Zzogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgcHJpY2VzOiBQcmljZXNcbiAgKSB7XG4gICAgc3VwZXIoYXBwLCBza3UsIHR5cGUsIG5hbWUsIGludGVybmFsU2x1ZywgZGVzY3JpcHRpb24sIHByaWNlcyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFkZE9uIGV4dGVuZHMgQ29tbW9uU2t1IHtcbiAgY29uc3RydWN0b3IoXG4gICAgYXBwOiBzdHJpbmcsXG4gICAgc2t1OiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgdHlwZSA9IFwiYWRkb25cIiBhcyBjb25zdCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgaW50ZXJuYWxTbHVnOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBwcmljZXM6IFByaWNlc1xuICApIHtcbiAgICBzdXBlcihhcHAsIHNrdSwgdHlwZSwgbmFtZSwgaW50ZXJuYWxTbHVnLCBkZXNjcmlwdGlvbiwgcHJpY2VzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQnVuZGxlIGV4dGVuZHMgQ29tbW9uU2t1IHtcbiAgY29uc3RydWN0b3IoXG4gICAgYXBwOiBzdHJpbmcsXG4gICAgc2t1OiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgdHlwZSA9IFwiYnVuZGxlXCIgYXMgY29uc3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGludGVybmFsU2x1Zzogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgcHJpY2VzOiBQcmljZXMsXG4gICAgcmVhZG9ubHkgc2t1czogQXJyYXk8c3RyaW5nPlxuICApIHtcbiAgICBzdXBlcihhcHAsIHNrdSwgdHlwZSwgbmFtZSwgaW50ZXJuYWxTbHVnLCBkZXNjcmlwdGlvbiwgcHJpY2VzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3Vic2NyaXB0aW9uIGV4dGVuZHMgQ29tbW9uU2t1IHtcbiAgY29uc3RydWN0b3IoXG4gICAgYXBwOiBzdHJpbmcsXG4gICAgc2t1OiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgdHlwZSA9IFwic3Vic2NyaXB0aW9uXCIgYXMgY29uc3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGludGVybmFsU2x1Zzogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgcHJpY2VzOiBQcmljZXMsXG4gICAgcmVhZG9ubHkgc2t1czogQXJyYXk8c3RyaW5nPlxuICApIHtcbiAgICBzdXBlcihhcHAsIHNrdSwgdHlwZSwgbmFtZSwgaW50ZXJuYWxTbHVnLCBkZXNjcmlwdGlvbiwgcHJpY2VzKTtcbiAgfVxufVxuIl19
