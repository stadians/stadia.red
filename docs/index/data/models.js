import { flag } from "../flags.js";
import { localKey } from "./local-key.js";
export class Prices {
  constructor(
    countryCode,
    currencyCode,
    proPriceCents = null,
    proSalePriceCents = null,
    basePriceCents = null,
    baseSalePriceCents = null
  ) {
    this.countryCode = countryCode;
    this.currencyCode = currencyCode;
    this.proPriceCents = proPriceCents;
    this.proSalePriceCents = proSalePriceCents;
    this.basePriceCents = basePriceCents;
    this.baseSalePriceCents = baseSalePriceCents;
  }
  render() {
    // TODO: god remove this once you have fixed type
    if (!this) return;
    if (this.basePriceCents) {
      return `${Math.floor(this.basePriceCents / 100)}.${String(
        this.basePriceCents % 100
      ).padStart(2, "0")} ${this.currencyCode} ${flag(this.countryCode)}`;
    } else {
      return `âˆž ${this.currencyCode} ${flag(this.countryCode)}`;
    }
  }
  static fromProto(data) {
    let countryCode = "??";
    let currencyCode = "???";
    let proPriceCents = null;
    let proSalePriceCents = null;
    let basePriceCents = null;
    let baseSalePriceCents = null;
    const priceScale = 10000;
    for (const priceData of data) {
      if (priceData[3]) countryCode = priceData[3];
      if (priceData[4]) currencyCode = priceData[4];
      let _timeSpan = [priceData[11], priceData[12]];
      let potentialBasePrice = priceData[6]?.[0]?.[0]
        ? priceData[6][0][0] / priceScale
        : null;
      let potentialProPrice = priceData[6]?.[2]?.[0]?.[2]?.[0]
        ? priceData[6][2][0][2][0] / priceScale
        : null;
      if (potentialBasePrice) basePriceCents = potentialBasePrice;
      if (potentialProPrice) proPriceCents = potentialProPrice;
    }
    return new Prices(
      countryCode,
      currencyCode,
      proPriceCents,
      proSalePriceCents,
      basePriceCents,
      baseSalePriceCents
    );
  }
}
export class CommonSku {
  constructor(app, sku, type, name, internalSlug, description, prices) {
    this.app = app;
    this.sku = sku;
    this.type = type;
    this.name = name;
    this.internalSlug = internalSlug;
    this.description = description;
    this.prices = prices;
    this.localKey = localKey(this);
  }
}
export class Game extends CommonSku {
  constructor(
    app,
    sku,
    type = "game",
    name,
    internalSlug,
    description,
    prices
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
    this.prices = prices;
  }
}
export class AddOn extends CommonSku {
  constructor(
    app,
    sku,
    type = "addon",
    name,
    internalSlug,
    description,
    prices
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
  }
}
export class Bundle extends CommonSku {
  constructor(
    app,
    sku,
    type = "bundle",
    name,
    internalSlug,
    description,
    prices,
    skus
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
    this.skus = skus;
  }
}
export class Subscription extends CommonSku {
  constructor(
    app,
    sku,
    type = "subscription",
    name,
    internalSlug,
    description,
    prices,
    skus
  ) {
    super(app, sku, type, name, internalSlug, description, prices);
    this.type = type;
    this.skus = skus;
  }
}
//# sourceMappingURL=data:application/json;base64,
