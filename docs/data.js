import * as records from "./records.js";
export class DataStore {
  constructor() {
    // Update to clear existing data when making incompatible schema changes.
    this.schema = 20200205;
    this.skusById = new Map();
  }
  static async open() {
    const data = new DataStore();
    await data.load();
    return data;
  }
  async migrate() {
    const existingSchema = (await browser.storage.local.get("schema")).schema;
    if (this.schema !== existingSchema) {
      console.info(
        `Resetting extension storage (data schema was ${existingSchema} but we need ${this.schema}).`
      );
      await browser.storage.local.clear();
      await browser.storage.local.set({ schema: this.schema });
    }
  }
  async load() {
    await this.migrate();
    const { skusByLocalKey } = await browser.storage.local.get([
      "skusByLocalKey",
    ]);
    console.debug("i'd like to load", skusByLocalKey);
  }
  async save() {
    await this.migrate();
    await browser.storage.local.set({
      skusByLocalKey: records.sorted(
        Object.fromEntries(this.skusByLocalKey.entries())
      ),
    });
  }
  values() {
    return this.skusById.values();
  }
  get(id) {
    return this.skusById.get(id);
  }
  upsert(sku) {
    const existing = this.skusById.get(sku.sku);
    if (existing === undefined) {
      this.skusById.set(sku.sku, sku);
      console.info("SKU added", sku);
      return sku;
    }
    if (existing !== sku) {
      if (JSON.stringify(existing) !== JSON.stringify(sku)) {
        const previous = { ...existing };
        console.info(
          "SKU updated, adding",
          sku,
          "to",
          previous,
          "producing",
          existing
        );
        Object.assign(existing, sku);
      }
    }
    return existing;
  }
  if(existing) {
    const existingJson = JSON.stringify(existing);
    const newJson = JSON.stringify(sku);
    if (existingJson !== newJson) {
      console.warn(`skus had same ids but different properties.`);
      Object.assign(existing, sku);
    }
    return existing;
  }
}
{
  this.skus[sku.sku] = sku;
  return sku;
}
export const localKey = (sku) => {
  const length = 32;
  const maxNameLength = 23;
  const typeTag =
    { game: "g", addon: "o", bundle: "x", subscription: "c" }[sku.type] ??
    `?${sku.type}?`;
  const idsPrefix = sku.app.slice(0, 6) + sku.sku.slice(0, 2);
  const idsRest = sku.app.slice(6) + sku.sku.slice(2);
  let name = (sku.name + sku.internalSlug)
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "");
  if (name.length > maxNameLength) {
    const letterCounts = {};
    for (const letter of name) {
      letterCounts[letter] = (letterCounts[letter] || 0) + 1;
    }
    while (name.length > maxNameLength) {
      const mostFrequentCount = Math.max(...Object.values(letterCounts));
      const mostFrequent = Object.entries(letterCounts)
        .filter(([_letter, count]) => count == mostFrequentCount)
        .map(([letter, _count]) => letter);
      for (let i = name.length - 1; i >= 0; i -= 1) {
        const letter = name[i];
        if (mostFrequent.includes(letter)) {
          name = name.slice(0, i) + name.slice(i + 1);
          letterCounts[letter] -= 1;
          break;
        }
      }
    }
  }
  return (typeTag + idsPrefix + name + idsRest).slice(0, length);
};
export class CommonSku {
  constructor(app, sku, type, name, internalSlug, description) {
    this.app = app;
    this.sku = sku;
    this.type = type;
    this.name = name;
    this.internalSlug = internalSlug;
    this.description = description;
    this.proPriceCents = null;
    this.proSalePriceCents = null;
    this.basePriceCents = null;
    this.baseSalePriceCents = null;
    this.localKey = localKey(this);
  }
}
export class Game extends CommonSku {
  constructor(app, sku, type = "game", name, internalSlug, description) {
    super(app, sku, type, name, internalSlug, description);
    this.type = type;
    this.internalSlug = internalSlug;
    this.description = description;
  }
}
export class AddOn extends CommonSku {
  constructor(app, sku, type = "addon", name, internalSlug, description) {
    super(app, sku, type, name, internalSlug, description);
    this.type = type;
    this.internalSlug = internalSlug;
    this.description = description;
  }
}
export class Bundle extends CommonSku {
  constructor(
    app,
    sku,
    type = "bundle",
    name,
    internalSlug,
    description,
    skus
  ) {
    super(app, sku, type, name, internalSlug, description);
    this.type = type;
    this.internalSlug = internalSlug;
    this.description = description;
    this.skus = skus;
  }
}
export class Subscription extends CommonSku {
  constructor(
    app,
    sku,
    type = "subscription",
    name,
    internalSlug,
    description,
    skus
  ) {
    super(app, sku, type, name, internalSlug, description);
    this.type = type;
    this.internalSlug = internalSlug;
    this.description = description;
    this.skus = skus;
  }
}
//# sourceMappingURL=data:application/json;base64,
