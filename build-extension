#!/usr/bin/env bash
set -euo pipefail
shopt -s inherit_errexit nullglob compat"${BASH_COMPAT=42}"
cd "$(dirname "${BASH_SOURCE}")"

if [ -z "${npm_package_name:-}" ]; then
    printf "\n🔹 Initializing Node/Yarn environment...\n";

    if [ -e "${HOME}/.nvm/nvm.sh" ]; then
        printf "\n🔹 Verifying Node version...\n";

        source "${HOME}/.nvm/nvm.sh";
        if [ -z "$(nvm which default)" ]; then
            nvm install stable;
            nvm use stable;
        else
            nvm use default;
        fi
        node_version="$(node -p 'require("./package.json").engines.node')";
        nvm install "${node_version}";
        nvm use "${node_version}";
        npm install -g yarn;
    else
        printf "⚠️ NVM not found.\n";
    fi

    printf "\n🔹 Installing Yarn dependencies...\n";
    yarn install;

    printf "\n🔹 Continuing in Yarn enivornment...\n";
    exec yarn build-extension "$@";
fi

dist="./extension-dist";

mkdir -p "${dist}";

sync;

if [ -e "./build-extension.pid" ]; then
    printf "🛑 Interrupting existing build...\n";
    killtree() {
        # from https://stackoverflow.com/a/3211182/1114
        local _pid="$1";
        kill -s STOP "${_pid}";
        for _child in $(pgrep -P ${_pid}); do
            killtree "${_child}";
        done
        kill -s KILL "${_pid}";
    }

    killtree "$(cat "./build-extension.pid")" 9 || printf "\n⚠️ Stale pidfile?\n";
    printf "$BASHPID" > "./build-extension.pid";

    sync;

    for n in {4..1}; do
        printf "\n🛑 Interrupted existing build. Debouncing for ${n}s...\n";
        sleep 1;
    done
    printf "\n🔸 Restarting build.\n"
else
    printf "$BASHPID" > "./build-extension.pid";
fi

sync;

printf "\n🔸 Pre-build formatting and version updates...\n";
import-sort --write "./extension-src/"**/*"."{"j","t"}"s"{,"x"};
node_version="$(node --version)";
replace-in-files --regex='"version"\s*:\s*"(.*?)"' --replacement='"version": "'"$(date "+%Y.%-m.%-d")"'"' "./package.json" "./extension-src/manifest.json";
replace-in-files --regex='"version_name"\s*:\s*"(.*?)"' --replacement='"version_name": "'"$(date "+%Y-%m-%d")"'"' "./extension-src/manifest.json";
replace-in-files --regex='"node"\s*:\s*"(.*?)"' --replacement='"node": "'"${node_version}"'"' "./package.json";
replace-in-files --regex='"node_version"\s*:\s*"(.*?)"' --replacement='"node_version": "'"${node_version}"'"' "./.github/workflows/build.yml";

printf "\n🔸 Clearing previous build...\n";
rm -rf "${dist}"/*;

printf "\n🔸 Copying static files...\n";
cp -r "./extension-src/"* "./stadia.st/-"/*.json "${dist}/";
cp "./node_modules/webextension-polyfill/dist/browser-polyfill.js"{"",".map"} "${dist}/";
replace-in-files --regex='\s*//#\s*sourceMappingURL=[^\n]+\.map\s*$' --replacement '' "${dist}/browser-polyfill.js";
cp "./extension-src/index.html" "${dist}/.htm";

printf "\n🔸 Compiling TypeScript...\n";
tsc || printf "\n⚠️ TypeScript is confused. 😟\n";

printf "\n🔹 Post-build formatting...\n";
sort-json "./"*".json" {"./extension-src","./dist","./stadia.st/-","./.vscode","./.github"}"/"**/*"."{"json","yml","yaml"};
prettier --write "./"*".json" "./stadia.st/-/" "./.vscode/" "./.github/" "./extension-src/" "${dist}";

printf "\n🔹 Marking build as complete for auto-reloading...\n";
date -u +%s > "${dist}/last-build-timestamp.json";

printf "\n🔹 Post-build linting...\n";
web-ext lint -s "${dist}" || printf "\n⚠️ Firefox is confused. 🦊\n";
eslint --fix-dry-run "./extension-src/"**/*"."{"j","t"}"s"{,"x"} || printf "\n⚠️ ESLint is confused. 🐭\n";

rm "./build-extension.pid";

printf "\n✔️ Build complete. ";
